`timescale 1ns/1ps
module tiny_risc (
    input clk,
    input reset,
    output [31:0] result
);
    
    reg [31:0] pc;

    
    wire [31:0] instruction;

    wire [4:0] opcode;
    wire imm_flag;
    wire [3:0] rd, rs1, rs2;
    wire [31:0] imm_ext;

    wire [31:0] op1, op2;

    wire [31:0] alu_result;

    wire [31:0] mem_read_data;
    wire [31:0] mem_address = op1 + (imm_flag ? imm_ext : op2);
    reg mem_write_en;

    reg reg_write_en;

    instruction_fetch fetch (
        .pc(pc),
        .instruction(instruction)
    );

    instruction_decode decode (
        .instruction(instruction),
        .opcode(opcode),
        .imm_flag(imm_flag),
        .rd(rd),
        .rs1(rs1),
        .rs2(rs2),
        .imm_ext(imm_ext)
    );

    reg [31:0] write_data;
    register_file regs (
        .clk(clk),
        .reset(reset),
        .rd(rd),
        .rs1(rs1),
        .rs2(rs2),
        .write_data(write_data),
        .reg_write_en(reg_write_en),
        .op1(op1),
        .op2(op2)
    );

    execute exe (
        .opcode(opcode),
        .imm_flag(imm_flag),
        .op1(op1),
        .op2(op2),
        .imm_ext(imm_ext),
        .result(alu_result)
    );

    memory_access mem (
        .clk(clk),
        .mem_write(mem_write_en),
        .address(mem_address),
        .write_data(op2),
        .read_data(mem_read_data)
    );

   
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 0;
            reg_write_en <= 0;
            mem_write_en <= 0;
            write_data <= 0;
        end else begin
            mem_write_en <= 0;
            reg_write_en <= 0;

          
            $display("Time: %0t | R1 = %d, R2 = %d", $time, op1, op2);

            case (opcode)
                5'b00000, // ADD
                5'b00001, // SUB
                5'b00010, // AND
                5'b00011, // OR
                5'b00100, // XOR
                5'b00101, // MOV
                5'b00110, // MUL
                5'b00111: begin // DIV
                    write_data <= alu_result;
                    $display("ALU Operation: R1 = %d, R2 = %d, Result = %d", op1, op2, alu_result); 
                    reg_write_en <= 1;
                end
                5'b01000: begin // load
                    write_data <= mem_read_data;
                    reg_write_en <= 1;
                end
                5'b01001: begin // store
                
                    mem_write_en <= 1;
                end
                default: begin
                    write_data <= 0;
                    reg_write_en <= 0;
                end
            endcase
            pc <= pc + 1;
        end
    end

    // Output the result
    assign result = write_data;
endmodule


///////////////////////////////////////////////////

module instruction_fetch (
    input [31:0] pc,
    output reg [31:0] instruction
);
    reg [31:0] instr_mem [0:255];

   initial begin
    // input i am giving before start exceuting
    instr_mem[0] = {5'b00101, 1'b1, 4'd1, 4'd0, 4'd0, 14'd10}; // MOV R1, #10
    instr_mem[1] = {5'b00101, 1'b1, 4'd2, 4'd0, 4'd0, 14'd20}; // MOV R2, #20
    instr_mem[2] = {5'b00000, 1'b0, 4'd3, 4'd1, 4'd2, 14'd0};  // ADD R3, R1, R2
    instr_mem[3] = {5'b00000, 1'b1, 4'd4, 4'd1, 4'd0, 14'd5};  // ADD R4, R1, #5
    instr_mem[4] = {5'b00001, 1'b0, 4'd5, 4'd2, 4'd1, 14'd0};  // SUB R5, R2, R1
    instr_mem[5] = {5'b00110, 1'b0, 4'd6, 4'd1, 4'd2, 14'd0};  // MUL R6, R1, R2
    instr_mem[6] = {5'b00111, 1'b0, 4'd7, 4'd2, 4'd1, 14'd0};  // DIV R7, R2, R1
end

    always @(*) begin
        instruction = instr_mem[pc];
    end
endmodule
///////////////////////////////////////

module instruction_decode (
    input [31:0] instruction,
    output [4:0] opcode,
    output imm_flag,
    output [3:0] rd,
    output [3:0] rs1,
    output [3:0] rs2,
    output [31:0] imm_ext
);
    assign opcode = instruction[31:27];
    assign imm_flag = instruction[26];
    assign rd = instruction[25:22];
    assign rs1 = instruction[21:18];
    assign rs2 = instruction[17:14];
    wire [13:0] imm = instruction[13:0];
    assign imm_ext = {{18{imm[13]}}, imm};
endmodule

////////////////////////////////////////////////////

module register_file (
    input clk,
    input reset,
    input [3:0] rd,         // Destination register
    input [3:0] rs1,        // Source register 1
    input [3:0] rs2,        // Source register 2
    input [31:0] write_data, // Data to write into register
    input reg_write_en,     // Write enable signal
    output [31:0] op1,      // Operand 1 (data from rs1)
    output [31:0] op2       // Operand 2 (data from rs2)
);
    
    reg [31:0] reg_file [0:15];

    
    integer i;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
          
            for (i = 0; i < 16; i = i + 1) begin
                reg_file[i] <= 32'b0;
            end
        end else begin
            if (reg_write_en) begin
                // Write data to the register specified by 'rd'
                reg_file[rd] <= write_data;
            end
        end
    end

    // Read values from registers
    assign op1 = reg_file[rs1];  // Read data from register 'rs1'
    assign op2 = reg_file[rs2];  // Read data from register 'rs2'

endmodule


//////////////////////////////////////////////////

module execute (
    input [4:0] opcode,
    input imm_flag,
    input [31:0] op1,
    input [31:0] op2,
    input [31:0] imm_ext,
    output reg [31:0] result
);
    always @(*) begin
        case (opcode)
            5'b00000: begin
                result = op1 + (imm_flag ? imm_ext : op2);  // ADD
                $display("ADD: R1 = %d, R2 = %d, Result = %d", op1, op2, result);  
            end
            5'b00001: result = op1 - (imm_flag ? imm_ext : op2);  // SUB
            5'b00010: result = op1 & (imm_flag ? imm_ext : op2);  // AND
            5'b00011: result = op1 | (imm_flag ? imm_ext : op2);  // OR
            5'b00100: result = op1 ^ (imm_flag ? imm_ext : op2);  // XOR
            5'b00101: result = imm_flag ? imm_ext : op1;          // MOV
            5'b00110: result = op1 * (imm_flag ? imm_ext : op2);  // MUL
            5'b00111: result = (imm_flag ? imm_ext : op2) != 0 ?  // DIV
                          (op1 / (imm_flag ? imm_ext : op2)) : 32'hDEADBEEF;
            default:  result = 0;
        endcase
    end
endmodule


////////////////////

module memory_access (
    input clk,
    input mem_write,   // here 1 means store 0 means load
    input [31:0] address,    // this is addres for load and store
    input [31:0] write_data, // Data to store 
    output reg [31:0] read_data // Data read from memory for load
);

    reg [31:0] data_mem [0:255]; 

    always @(posedge clk) begin
        if (mem_write) begin
            data_mem[address] <= write_data;  // Store 
        end else begin
            read_data <= data_mem[address];   // Load 
        end
    end
endmodule

